name: Terraform Apply

on: [workflow_dispatch,push]

env:
  ARM_CLIENT_ID:       "${{secrets.ARM_CLIENT_ID}}"
  ARM_CLIENT_SECRET:   "${{secrets.ARM_CLIENT_SECRET}}"
  ARM_SUBSCRIPTION_ID: "${{secrets.ARM_SUBSCRIPTION_ID}}"
  ARM_TENANT_ID:       "${{secrets.ARM_TENANT_ID}}"
  PlanID:              "${{ github.run_id }}-${{ github.run_number }}"
  GITHUB_API_PREFIX:   "https://api.github.com/repos/mbrosda/myTF_ActionsTest"
  THIS_WORKFLOW_YAML:  ".github/workflows/apply.yaml"
  BranchName:          "${{ github.ref_name }}"

defaults:
  run:
    working-directory: .

jobs:
  ##########################################################################################################
  # perform TF plan only, then store plan as artifact
  ##########################################################################################################
  terraform-plan:
    runs-on: ubuntu-latest

    steps:
      #---------------
      # initialize job
      #---------------

      - name: Display current RUN ID
        run: |
          echo "RUN_ID:     ${{ github.run_id }}"
          echo "RUN_NUMBER: ${{ github.run_number }}"

      - name: Setup Repo Cache (to prevent long repo downloads)
        id: cache-repo
        uses: actions/cache@v3
        with:
          path: .
          key: repo-cache

      #------------------------------------------------
      # checkout code and prepare terraform-environment
      #------------------------------------------------

      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

       #---------------------------------------
       # perform terraform plan and show result
       #---------------------------------------

       # - name: Terraform Validate
       #   run: terraform validate

      - name: Terraform Plan
        run: terraform plan -lock-timeout=300s -out=plan.${{ env.PlanID }}.bin

      #-------------------------------
      # save plan as artifact, cleanup
      #-------------------------------

      - name: Store Plan and providers as artifact
        uses: actions/upload-artifact@v2
        with:
          name: Terraform-Artifacts
          path: |
            plan.${{ env.PlanID }}.bin
 
      - name: Remove obsolete files from cache (will be cleaned up anyway when repo is checked out again)
        run: rm -rf plan.${{ env.PlanID }}.bin

  ##########################################################################################################
  # wait for approval (required for environment "deploy"), then perform tf apply
  ##########################################################################################################
  terraform-apply:
    needs: terraform-plan
    runs-on: ubuntu-latest

    environment:
      name: deploy
      url: https://github.com

    steps:
      #---------------
      # initialize job
      #---------------

      - name: Display current RUN ID
        run: |
          echo "RUN_ID:     ${{ github.run_id }}"
          echo "RUN_NUMBER: ${{ github.run_number }}"

      - name: Setup Repo Cache (to prevent long repo downloads)
        id: cache-repo
        uses: actions/cache@v3
        with:
          path: .
          key: repo-cache

      #-----------------------------------------------------------------------------------------------
      # cancel other job runs to prevent old (not yet approved) plans to be applied later
      # selecting the right workflow run gives more control and flexibility than other solutions, e.g.
      # styfle/cancel-workflow-action@0.10.1 or n1hility/cancel-previous-runs@v2
      #-----------------------------------------------------------------------------------------------

      - name: Get IDs of previous runs
        id: previous-runs-ids
        run: |
          runids=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ github.token }}"  ${{ env.GITHUB_API_PREFIX }}/actions/runs | \
          jq -r '[.workflow_runs[]                                  | 
            select(.status      =="waiting")                        | 
            select(.path        =="${{ env.THIS_WORKFLOW_YAML}}")   | 
            select(.head_branch =="${{ env.BranchName }}")          | 
            .id] | unique | join (" ")') ; \
          echo "::set-output name=RUN_IDs::$runids"

      - name: Cancel previous runs
        if: ${{ steps.previous-runs-ids.outputs.RUN_IDs != '' }}
        run: |
          for ID in ${{ steps.previous-runs-ids.outputs.RUN_IDs }}
          do
            echo "Cancelling $ID ..."
            curl -s -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ github.token }}" ${{ env.GITHUB_API_PREFIX }}/actions/runs/${ID}/cancel
          done

      #---------------------------------------------------------------------------------------------
      # checkout code, retrieve artifact (=plan from previous job) and prepare terraform-environment
      #---------------------------------------------------------------------------------------------

      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - uses: actions/download-artifact@v3
        with:
          name: Terraform-Artifacts

      - name: Terraform Init
        run: terraform init

      #--------------------------------------------------------------
      # Download plan which was generated in previous job, then apply
      #--------------------------------------------------------------
      - name: Terraform Apply
        run: terraform apply --auto-approve

      #--------
      # cleanup
      #--------

      # - name: Git Status
      #   run: (git status ;   git config --global user.email "marcus.brosda@gmx.de"; git config --global user.name "Marcus Brosda"; git add .terraform/terraform.tfstate; git commit -m 'new tfstate'; git push); true

      - name: Remove obsolete files from cache (will be cleaned up anyway)
        run: rm -rf plan.${{ env.PlanID }}.bin
